#include<algorithm>
#include<vector>
	vector<tipo> nome(tamanho);
	vetor.size(); 	//inteiro
	vetor.begin(); 	//ponteiro
	vetor.end(); 	//ponteiro
	vetor.erase(x); //remove elemento
	sort(vetor.begin(), vetor.end(), bool); //ordena a partir do retorno de bool
	vetor.push_back(x);	//insere elemento
	//ainda posso acessar localidades com vetor[i]
	cin.ignore(); //ignora blank
	getline(cin, vetor[i]); //a entrada é uma linha


struct riquiMorde
{
    string nome;
    int valor;
};

bool forca(riquiMorde a, riquiMorde b)
{
    return (a.nome < b.nome || (a.nome == b.nome && a.valor > b.valor));
};

riquiMorde aux;
vector<riquiMorde> vetor;
for (int i = 0; i < p; i++)
    {
        cin >> aux.nome >> aux.valor;
        vetor.push_back(aux);
    }



#include <queue>
	queue<tipo> nome;
	fila.push(x);	//insere x
	fila.pop();	//remove front()
	fila.front();	//retorna elemento
	fila.size();	//inteiro
	fila.empty();	//booleano


#include <stack>
	stack<tipo> nome;
	pilha.empty();	//booleano
	pilha.push(x);	//insere elemento
	pilha.pop();	//remove elemento
	pilha.top();	//retorna elemento


#include <string>
	string s;
	s.size();


#include <set>
	set<tipo> nome;
	set<tipo>::iterator it;
	set.insert(x);	//insere elemento
	set.count(x);	//booleano
	set.erase(x);	//remove elemento
	set.empty();	//booleano
	set.size();	//inteiro
	set.begin(); 	//ponteiro
	set.end(); 	//ponteiro


pair<tipo, tipo> nome;
cin>>pair.first>>pair.second;
abs(int-int);	//função módulo

#include<map>
	map<tipo(chave), tipo(elemento)> nome;
	map<tipo, tipo>::iterator it;
	(*it).first;	//chave
	(*it).second;	//elemento
	map.begin();	//ponteiro
	map.end();	//ponteiro
	map.find(x);	//ponteiro para x caso ache, map.end() caso nao


#include<iomanip>
	cout<<fixed<<setprecision(2)
	//para uso de precisão dupla


#include<queue>
	priority_queue<tipo> nome; //ordena decrescentemente
	priority_queue<tipo, vector<tipo>, greater<tipo>> nome;	//ordena crescentemente
	pq.push(x);	//insere elemento
	pq.pop();	//remove elemento
	pq.top();	//retorna elemento
	pq.empty();	//booleano
			

#include<vector>
#include<algorithm>
	bool cmp(tipo a, tipo b){
		return a<b;	
	}
	//função de comparação para ordenação
	stable_sort(vet.begin(), vet.end(), cmp);	//ordena segundo cmp
	r = binary_search(vet.begin(), vet.end(), aux);	//booleano
	vector<tipo>::iterator it;
	lower_bound(vet.begin(), vet.end(), aux, cmp);	//ponteiro(indice, endereço de memoria) para o primeiro elemento não menor que aux, seguindo a ordenação de cmp
	lower_bound(vet.begin(), vet.end(), aux);	//ponteiro(indice, endereço de memoria) para o primeiro elemento não menor que aux
	upper_bound(vet.begin(); vet.end(); aux); 	//ponteiro(indice, endereço de memoria) para o primeiro elemento maior que aux
	
