#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/types.h>

void inicializa_matrix(int *A, int n){
    int i, j;
    for (i=0; i < n; i++)
        for (j=0; j < n; j++)
            A[i*n+j] = rand()%(10-1)*1;
}

void imprime_matrix(int *A, int n){
    int i,j;
    for (i=0; i < n; i++){
        for (j=0; j < n; j++)
            printf("%d\t", A[i*n+j]);
        printf("\n");
    }
}

int main(int argc, char **argv){
    int n = atoi(argv[1]);
    int i,j,k;
    int *A = (int *) malloc (sizeof(int)*n*n);
    int *B = (int *) malloc (sizeof(int)*n*n);
    int *C = (int *) malloc (sizeof(int)*n*n);
    struct timeval tv1, tv2;  // variaveis para a medicao de tempo
    double t1, t2;            // variaveis para a medicao de tempo

    inicializa_matrix(A, n);
    inicializa_matrix(B, n);

    // recupera o tempo inicial - antes do bloco paralelo
    gettimeofday(&tv1, NULL);
    t1 = (double)(tv1.tv_sec) + (double)(tv1.tv_usec)/ 1000000.00;

    for(i = 0; i < n; i++){
            for(j = 0; j < n; j++){
                for(k = 0; k < n; k++){
                    C[i*n+j]+=A[i*n+k]*B[k*n+j];
                }
            }
        }

        // recupera o tempo final - apos a execucao do bloco paralelo
        gettimeofday(&tv2, NULL);
        t2 = (double)(tv2.tv_sec) + (double)(tv2.tv_usec)/ 1000000.00;
        // calcula e imprime o tempo total de execucao
        printf("\nO tempo de execucao foi: %lf\n\n", (t2 - t1));

    imprime_matrix(A,n);
    imprime_matrix(B,n);
    imprime_matrix(C,n);
    return 0;
}